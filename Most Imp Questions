BAsic -
Media Query
All in one Media screens
 col-xs < 575px
 767px > col-sm > 575px
 1199px < col-md < 768px
 1200px < col-lg
 In Bootstrap 4.0 -
575>col-xs
576>col-sm<767
768>col-md<991
992>col-lg<1199
col-xl>1200
------------------------------------------------------------------------------
1. What is Web Worker ? Create one ?

Ans - 
A web worker is a JavaScript code running in the background, without affecting the performance of the page.

Check Web Worker Support --
if (typeof(Worker) !== "undefined") {
    // Yes! Web worker support!
    // Some code.....
} else {
    // Sorry! No Web Worker support..
}

Create a Web Worker File --
var i = 0;
function timedCount() {
    i = i + 1;
    postMessage(i);
    setTimeout("timedCount()",500);
}

timedCount();

**postMessage() method is used to post a message back to the HTML page.
**timedCount() fires or calls stopCount() if time goes below zero. 
--------------------------------------------------
Create a Web Worker Object --
if (typeof(w) == "undefined") {
    w = new Worker("demo_workers.js");
}
--------------------------------------------------
we can send and receive messages from the web worker. --
w.onmessage = function(event){
    document.getElementById("result").innerHTML = event.data;
};

**onmessage - When a message is received.
---------------------------------------------
Stop a Web Worker --
w.terminate();

_________________________________________________________________________________________________
2. What is SSE in Html5. Explain with Example ?

Ans -
Server-Sent Events allow a web page to get updates from a server.
<script>
if(typeof(EventSource) !== "undefined") {
    var source = new EventSource("demo_sse.php");
    source.onmessage = function(event) {
        document.getElementById("result").innerHTML += event.data + "<br>";
    };
} else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support server-sent events...";
}
</script>
onopen	- When a connection to the server is opened
onmessage - 	When a message is received
onerror	- When an error occurs
______________________________________________________________________________________________
3. What is geo location ? how to use it ?

Ans -
The HTML Geolocation API is used to locate a user's position.
<button onclick="getLocation()">Try It</button>

<p id="demo"></p>
<div id="mapholder"></div>

<script>
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition, showError);
    } else {
        document.getElementById("demo").innerHTML = "Geolocation is not supported by this browser.";
    }
}

function showPosition(position) {
    var latlon = position.coords.latitude + "," + position.coords.longitude;
    
    var img_url = "https://maps.googleapis.com/maps/api/staticmap?center="
    +latlon+"&zoom=14&size=400x300&key=AIzaSyBu-916DdpKAjTmJNIgngS6HL_kDIKU0aU";
    
    document.getElementById("mapholder").innerHTML = "<img src='"+img_url+"'>";
}
//To use this code on your website, get a free API key from Google.
//Read more at: https://www.w3schools.com/graphics/google_maps_basic.asp

function showError(error) {
    switch(error.code) {
        case error.PERMISSION_DENIED:
            document.getElementById("demo").innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
             document.getElementById("demo").innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
             document.getElementById("demo").innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            document.getElementById("demo").innerHTML = "An unknown error occurred."
            break;
    }
}
</script>
PERMISSION_DENIED - User denied the request for Geolocation.
POSITION_UNAVAILABLE - Location information is unavailable.
TIMEOUT - The request to get user location timed out.
UNKNOWN_ERROR - An unknown error occurred.
__________________________________________________________________________________________________
4. create local and session storage and define it ?

Ans - 
Local Storage

<script>
// Check browser support
if (typeof(Storage) !== "undefined") {
    // Store
    localStorage.setItem("lastname", "Smith");
    // Retrieve
    document.getElementById("result").innerHTML = localStorage.getItem("lastname");
} else {
    document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Storage...";
}
</script>
window.localStorage - stores data with no expiration date
window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)
--------------------------------------------------------------
Session Storage -

syntax -
// Save data to sessionStorage
sessionStorage.setItem('key', 'value');

// Get saved data from sessionStorage
var data = sessionStorage.getItem('key');

// Remove saved data from sessionStorage
sessionStorage.removeItem('key');

// Remove all saved data from sessionStorage
sessionStorage.clear();

e.g -
if(typeof(Storage) !== 'undefined'){
var user = {'name':'John'};
sessionStorage.setItem('username', user);
var x = sessionStorage.getItem('username'); 
document.getElementById("demo").innerHTML = x;
}else{
alert("ur browser not support storage");
}
_______________________________________________________________________________________________________

5. Showing video in Html5 and handling play , pause and stop using javascript ?

Ans - 
<div style="text-align:center"> 
    <button onclick="playPause()">Play/Pause</button> 
    <button onclick="makeBig()">Big</button>
    <button onclick="makeSmall()">Small</button>
     <button onclick="makeNormal()">Normal</button>
     <br><br>
    <video id="video1" width="420">
        <source src="mov_bbb.mp4" type="video/mp4">
        <source src="mov_bbb.ogg" type="video/ogg">
        Your browser does not support HTML5 video.
  </video>
</div> 

<script> 
var myVideo = document.getElementById("video1"); 
function playPause() { 
    if (myVideo.paused) 
        myVideo.play(); 
    else 
        myVideo.pause(); 
} 

function makeBig() { 
    myVideo.width = 560; 
} 

function makeSmall() { 
    myVideo.width = 320; 
} 

function makeNormal() { 
} 
</script> 


__________________________________________________________________________________________________________________________
-------------------------------------------------------------------------------------------------------------------------
______________________________________________________CSS 3_______________________________________________________________

1. Disable anchor click using css ?

Ans - 
a{
    pointer-events : none;
}

2. create one simple svg circle ?

Ans - 
<svg width="100" height="100">
  <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
</svg>

3. CSS3 New Properties -
Selectors
Box Model
Backgrounds and Borders
Image Values and Replaced Content
Text Effects
2D/3D Transformations
Animations
Multiple Column Layout
User Interface
--------------------------------------------------------------------------
see all css3 references in https://www.w3schools.com/cssref/default.asp
--------------------------------------------------------------------------
Css3 Selectors -

There are basically 3 types of selecters in css/css3 
1. Basic Selector
2. Combinators
3. Pseudo selectors (Pseudo class and Pseudo elements)

Examples -
Basic Selectors -
i)Type selectors
ii)Class selectors
iii)ID selectors
iv)Universal selectors
v)Attribute selectors

Combinators -
Adjacent sibling combinator  
General sibling combinator 
Child combinator
Descendant combinator

Pseudo Class Selectors -
:checked,:default,:disabled,:empty,:enabled,:first,:first-of-type,:fullscreen,:focus-within,:in-range,:invalid
,:lang(),:last-child,:last-of-type,:left,:link,:not(),:nth-child(),:nth-last-child(),
:nth-of-type(),:only-child,:only-of-type,:optional,:out-of-range,:placeholder-shown,:read-only,:read-write
:required,:right,:scope,:target,:valid,:visited etc...

pseudo Element Selector -
::after (:after)
::backdrop
::before (:before)
::first-letter (:first-letter)
::first-line (:first-line)
::placeholder
::selection
::cue (:cue)
element>element,	div > p	Selects all <p> elements where the parent is a <div> element.
element+element,	div + p	Selects all <p> elements that are placed immediately after <div> elements.
element1~element2,	p ~ ul	Selects every <ul> element that are preceded by a <p> element.

-------------------------------------------------------------------------------------------
Bootstrap Offsets -
Offsets are used for spacing elements in the responsive grid.
e.g - <div class="container">
         <div class="col-md-6 col-md-offset-3">Hello</div>
      </div>
     Means that in the medium range of the grid system, the element will have a width of 6 colums and there will be 3 blank
     columns before the element (and as a consequence, will have 3 blank colums after).


--------------------------------------------------------------------------------------------
Handeling css animation through jquery -
$('#button').click(function () { 

    $('.box').animate({
        height: '300px',
        width: '200px'
    }, 3000);

});

 $('button').click(function(){
     $('.bubble').animate({transform: "scale(1)"}, 5000, 'linear');
 });

-------------------------------------------------------------------------------------------------
Uisng css3 @keyframes -
Syntax -
@-browser_extention-keyframes Frame_Name{
 from {
    css goes here
 }
 to {
   css goes here
 }
}
Calling keyframe -
div{
-webkit-animation : Frame_Name 5s infinite;
animation : Frame_Name 5s infinite;
}

or
@-webkit-keyframes Frame_Name {
    0%   {css goes here}
    25%  {css goes here}
    75%  {css goes here}
    100% {css goes here}
}
<style> 

Example -
div {
    width: 100px;
    height: 100px;
    background: red;
    position :relative;
    -webkit-animation: mymove 5s infinite; /* Safari 4.0 - 8.0 */
    animation: mymove 5s infinite;
}

/* Safari 4.0 - 8.0 */
@-webkit-keyframes mymove {
    0%   {top: 0px;}
    25%  {top: 200px;}
    75%  {top: 50px}
    100% {top: 100px;}
}

/* Standard syntax */
@keyframes mymove {
    0%   {top: 0px;}
    25%  {top: 200px;}
    75%  {top: 50px}
    100% {top: 100px;}
}
</style>


